var moveZeroes = function(nums) {
    let low= 0;
    let high = low+1;

    while(high<=nums.length-1){
        if(nums[low]!==0){
            low++;
            high++;
        }
        else
        if(nums[high]!==0){
            [nums[low],nums[high]] = [nums[high],nums[low]];
            low++
        }
        high++;
    }
    return nums;
};
console.log(moveZeroes([0,1,0,3,12]));



/**
 * let’s dry run the moveZeroes function with an example array nums = [0,1,0,3,12].

Here’s how it works:

Initialize two pointers low and high at the start of the array.
Start a loop that continues until high reaches the end of the array.
If nums[low] is not zero, increment both low and high.
If nums[low] is zero and nums[high] is not zero, swap nums[low] and nums[high], and then increment low.
Increment high at the end of each loop.
Now, let’s dry run the function:

Start with nums = [0,1,0,3,12], low = 0, and high = 1.
For the first iteration, nums[low] = 0 and nums[high] = 1. Swap these elements to get nums = [1,0,0,3,12]. Then increment low to 1.
For the second iteration, nums[low] = 0 and nums[high] = 0. Since both are zero, only increment high to 3.
For the third iteration, nums[low] = 0 and nums[high] = 3. Swap these elements to get nums = [1,3,0,0,12]. Then increment low to 2.
For the fourth iteration, nums[low] = 0 and nums[high] = 0. Since both are zero, only increment high to 4.
For the fifth iteration, nums[low] = 0 and nums[high] = 12. Swap these elements to get nums = [1,3,12,0,0]. Then increment low to 3.
Now high has reached the end of the array, so the loop ends.
So, the moveZeroes function modifies the array nums to [1,3,12,0,0], which is the result of moving all the zeroes in the original array [0,1,0,3,12] to the end.
 */