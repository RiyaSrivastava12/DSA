
function isArraySorted(num){
    let count = 0;
    let len = num.length - 1
    for(let i =0; i<len;i++)
    {
       if (num[i]>num[i+1]){
        count++;
       }
    }
    if(count>1 || (count == 1 && num[0]<num[len])){
        return false;
    }
    return true;
}

let nums = [3,4,5,1,2];
console.log(isArraySorted(nums)); // true

//nums = [2,1,3,4] // False

/**
 * The time complexity of the provided function is O(n), where n is the number of elements in the array. This is because the function only requires a single pass through the array12.

The space complexity of the function is O(1)12. This is because the function uses a constant amount of space to store the count and len variables, regardless of the size of the input array12.

In summary, this function is efficient in both time and space complexity.




It initializes a counter, count, to keep track of the number of times an element in the array is greater than the next element.
It then iterates over the array. If the current element is greater than the next element, it increments count.
After the loop, it checks the value of count. If count is greater than 1, it means there are more than one “drops” in the array, so the array is not sorted and rotated. It returns false.
If count is 1, it checks if the first element of the array is less than the last element. If it is, it means the “drop” is not at the boundary of the array, so the array is not sorted and rotated. It returns false.
If none of the above conditions are met, it means the array is sorted and rotated. It returns true.
 */